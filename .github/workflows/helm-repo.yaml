name: Helm Repository

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      target_release:
        description: 'Release tag to rebuild (e.g., v0.0.1-alpha.7)'
        required: true
        type: string

env:
  ARTIFACTHUB_REPO_ID: "7590d88d-22ae-4303-a5b9-afbdeddd3f24"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout master branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: master

    - name: Configure Git
      run: |
        git config --local user.name "${{ github.actor }}"
        git config --local user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0

    - name: Checkout gh-pages
      run: |
        # Check if gh-pages branch exists remotely
        if git ls-remote --heads origin gh-pages | grep gh-pages; then
          echo "gh-pages branch exists, checking it out..."
          git fetch origin gh-pages
          git checkout gh-pages
        else
          echo "Creating new orphan gh-pages branch..."
          git checkout --orphan gh-pages
          # Remove all files from the branch (stages the deletions)
          git rm -rf . 2>/dev/null || true
        fi

    - name: Download and package helm chart
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          echo "Processing release: $RELEASE_TAG"
        else
          RELEASE_TAG="${{ github.event.inputs.target_release }}"
          echo "Manual trigger - rebuilding release: $RELEASE_TAG"
        fi
        
        # Download the helm chart source archive from release assets
        HELM_ARCHIVE_URL=$(curl -s \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG" \
          | jq -r '.assets[] | select(.name | test("vault-sync-operator-helm-.*\\.tar\\.gz$")) | .browser_download_url')
        
        if [ "$HELM_ARCHIVE_URL" != "null" ] && [ -n "$HELM_ARCHIVE_URL" ]; then
          echo "Found helm archive: $HELM_ARCHIVE_URL"
          wget "$HELM_ARCHIVE_URL" -O helm-chart.tar.gz
          
          # Extract the chart source
          tar -xzf helm-chart.tar.gz
          
          # Package the chart (versions should already be correct)
          helm package vault-sync-operator
          
          echo "‚úÖ Successfully packaged chart from release ${RELEASE_TAG}"
        else
          echo "‚ùå No helm archive found in release assets"
          echo "Expected asset name pattern: vault-sync-operator-helm-*.tar.gz"
          
          # List available assets for debugging
          echo "Available assets:"
          curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG" \
            | jq -r '.assets[].name'
          
          exit 1
        fi

    - name: Create documentation structure
      run: |
        # Create docs directory
        mkdir -p docs examples
        
        # Copy key documentation files from master branch
        git checkout master -- README.md || echo "No README.md found"
        git checkout master -- docs/ || echo "No docs/ directory found"
        git checkout master -- examples/ || echo "No examples/ directory found"
        
    - name: Process release manifests
      run: |
        # If we're processing a release, also get release-specific manifests
        if [ "${{ github.event_name }}" = "release" ]; then
          RELEASE_TAG="${{ github.event.release.tag_name }}"
        else
          RELEASE_TAG="${{ github.event.inputs.target_release }}"
        fi
        
        # Try to download release manifests
        MANIFEST_URL=$(curl -s \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG" \
          | jq -r '.assets[] | select(.name | test("vault-sync-operator-manifests-.*\\.tar\\.gz$")) | .browser_download_url')
        
        if [ "$MANIFEST_URL" != "null" ] && [ -n "$MANIFEST_URL" ]; then
          echo "Found release manifests: $MANIFEST_URL"
          mkdir -p release-manifests
          wget "$MANIFEST_URL" -O manifests.tar.gz
          tar -xzf manifests.tar.gz -C release-manifests/
          echo "‚úÖ Downloaded release-specific manifests"
        fi

    - name: Generate HTML index
      run: |        
        # Create index.html for better navigation
        cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Vault Sync Operator - Helm Repository</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 40px; line-height: 1.6; color: #333; }
                .container { max-width: 800px; margin: 0 auto; }
                h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
                h2 { color: #34495e; margin-top: 30px; }
                .install-section { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .install-section h3 { margin-top: 0; color: #2c3e50; }
                code { background: #f1f2f6; padding: 2px 6px; border-radius: 4px; font-family: 'Monaco', 'Consolas', monospace; }
                pre { background: #2d3748; color: #e2e8f0; padding: 20px; border-radius: 8px; overflow-x: auto; }
                pre code { background: none; padding: 0; color: inherit; }
                .highlight { background: #fff3cd; padding: 15px; border-left: 4px solid #ffc107; margin: 20px 0; border-radius: 4px; }
                a { color: #3498db; text-decoration: none; }
                a:hover { text-decoration: underline; }
                .nav { background: #34495e; color: white; padding: 15px; border-radius: 8px; margin-bottom: 30px; }
                .nav a { color: #ecf0f1; margin-right: 20px; }
                .badge { background: #27ae60; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8em; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="nav">
                    <strong>üì¶ Vault Sync Operator Helm Repository</strong> |
                    <a href="https://github.com/${{ github.repository }}">GitHub</a> |
                    <a href="https://artifacthub.io/packages/search?repo=vault-sync-operator">Artifact Hub</a> |
                    <a href="#installation">Installation</a> |
                    <a href="#examples">Examples</a>
                </div>
                
                <h1>üîê Vault Sync Operator</h1>
                <p><span class="badge">Kubernetes Operator</span> <span class="badge">HashiCorp Vault</span> <span class="badge">Secret Management</span></p>
                
                <p>A Kubernetes operator that automatically syncs secrets from Kubernetes to HashiCorp Vault using annotations on Deployments.</p>
                
                <div class="highlight">
                    <strong>üöÄ Quick Start:</strong> Get up and running in minutes with automatic secret synchronization to Vault!
                </div>

                <div class="install-section" id="installation">
                    <h3>üì• Installation</h3>
                    <p>Add the Helm repository and install the operator:</p>
                    <pre><code># Add the repository
        helm repo add vault-sync-operator https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
        helm repo update

        # Install the operator
        helm install vault-sync-operator vault-sync-operator/vault-sync-operator \\
          --namespace vault-sync-operator-system \\
          --create-namespace \\
          --set vault.address="http://&lt;vault-ip-address&gt;:8200"</code></pre>
                </div>

                <div class="install-section">
                    <h3>‚öôÔ∏è Required Configuration</h3>
                    <p>You will need to configure your Vault server address:</p>
                    <ul>
                        <li><code>vault.address</code> - Your Vault server address (e.g., "http://vault.example.com:8200")</li>
                    </ul>
                    
                    <p><strong>Optional Configuration:</strong></p>
                    <ul>
                        <li><code>vault.role</code> - Vault Kubernetes auth role (defaults to vault-sync-operator)</li>
                        <li><code>vault.authPath</code> - Vault auth path (defaults to kubernetes)</li>
                        <li><code>image.tag</code> - Override the operator version if needed</li>
                    </ul>
                </div>

                <div class="install-section">
                    <h3>üöÄ Alternative Installation Methods</h3>
                    <p>The operator supports multiple deployment methods:</p>
                    <ul>
                        <li><strong>Helm Chart</strong> (recommended): Use this repository</li>
                        <li><strong>Kustomize</strong>: <code>kubectl apply -k config/default/</code></li>
                        <li><strong>Raw Manifests</strong>: Download from <a href="https://github.com/${{ github.repository }}/releases">GitHub Releases</a></li>
                    </ul>
                </div>

                <div class="install-section" id="examples">
                    <h3>üìù Usage Examples</h3>
                    <p>Annotate your deployments to sync secrets to Vault:</p>
                    <pre><code>apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: my-app
          annotations:
            vault-sync.io/path: "secret/data/my-app"
            vault-sync.io/secrets: |
              [
                {
                  "name": "my-app-secrets",
                  "keys": ["username", "password"],
                  "prefix": "app_"
                }
              ]
        spec:
          # ... rest of deployment spec</code></pre>
                </div>

                <h2>üìö Documentation</h2>
                <ul>
                    <li><a href="README.md">üìñ Complete README</a></li>
                    <li><a href="docs/">üìÅ Documentation Directory</a></li>
                    <li><a href="examples/">üí° Example Configurations</a></li>
                    <li><a href="https://github.com/${{ github.repository }}">üîó Source Code</a></li>
                </ul>

                <h2>üìä Available Charts</h2>
                <p>Check the <a href="index.yaml">index.yaml</a> for all available chart versions.</p>

                <h2>üÜò Support</h2>
                <p>
                    <strong>Issues:</strong> <a href="https://github.com/${{ github.repository }}/issues">GitHub Issues</a><br>
                    <strong>Discussions:</strong> <a href="https://github.com/${{ github.repository }}/discussions">GitHub Discussions</a>
                </p>

                <hr style="margin-top: 40px; border: none; border-top: 1px solid #bdc3c7;">
                <p style="text-align: center; color: #7f8c8d; font-size: 0.9em;">
                    Generated automatically from <a href="https://github.com/${{ github.repository }}">danieldonoghue/vault-sync-operator</a>
                </p>
            </div>
        </body>
        </html>
        EOF

    - name: Generate helm repository index
      run: |
        # Generate the index.yaml
        helm repo index . --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
        
        # Verify the index was created
        ls -la *.tgz index.yaml

    - name: Create Artifact Hub metadata
      run: |
        # Create artifacthub-repo.yml for verified publisher status
        cat > artifacthub-repo.yml << EOF
        # Artifact Hub repository metadata file
        # https://github.com/artifacthub/hub/blob/master/docs/metadata/artifacthub-repo.yml
        
        repositoryID: ${{ env.ARTIFACTHUB_REPO_ID }}
        
        owners:
          - name: ${{ github.repository_owner }}
            email: ${{ github.repository_owner }}@users.noreply.github.com
        
        ignore:
          - name: "docs"
          - name: "examples"
          - name: "*.md"
          - name: "*.html"
        EOF

    - name: Commit and push to gh-pages
      run: |
        # Configure git to use the GitHub token for authentication
        # git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Add all files
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Commit changes
        if [ "${{ github.event_name }}" = "release" ]; then
          git commit -m "Release ${{ github.event.release.tag_name }}"
        else
          git commit -m "Update helm repository (${{ github.event.inputs.target_release }})"
        fi
        
        # Push to gh-pages
        git push origin gh-pages

    - name: Display repository information
      run: |
        echo "üéâ Helm repository updated successfully!"
        echo ""
        echo "üì¶ Repository URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
        echo "üåê Browse: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
        echo ""
        echo "üöÄ To add this repository:"
        echo "helm repo add vault-sync-operator https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
        echo ""
        echo "üöÄ To install:"
        echo "helm install vault-sync-operator vault-sync-operator/vault-sync-operator \\"
        echo "  --namespace vault-sync-operator-system \\"
        echo "  --create-namespace \\"
        echo "  --set vault.address=\"http://<vault-ip-address>:8200\""
