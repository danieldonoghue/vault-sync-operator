name: CI

on:
  push:
    branches: [ master, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.github/workflows/helm-repo.yaml'

  pull_request:
    branches: [ master ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
permissions:
  contents: read
  security-events: write
  actions: read
  packages: write

env:
  GO_VERSION: "1.24"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-mod-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-mod-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-mod-

    - name: Cache Go build cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
        key: ${{ runner.os }}-go-build-${{ env.GO_VERSION }}-${{ hashFiles('**/*.go', 'go.mod', 'go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-build-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-build-

    - name: Download dependencies
      run: go mod download

    - name: Clean test environment
      run: |
        # Clean test caches but preserve module cache
        go clean -testcache
        rm -f coverage.out coverage.tmp
        find . -name "*.test" -delete 2>/dev/null || true
        find . -name "*.prof" -delete 2>/dev/null || true

    - name: Run tests
      run: |
        # Run tests with proper isolation
        go test -v -race -coverprofile=coverage.out -count=1 \
          $(go list ./... | grep -v /test/integration)

    - name: Display coverage
      run: go tool cover -func=coverage.out

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v7
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
      continue-on-error: true

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -a -ldflags='-w -s -extldflags "-static"' -tags netgo,osusergo -o vault-sync-operator-${{ matrix.goos }}-${{ matrix.goarch }} cmd/main.go

  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Login temporarily disabled since cache is disabled
    # - name: Log in to GitHub Container Registry
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.CR_PAT }}

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: vault-sync-operator:test
        # Temporarily building only AMD64 for faster CI
        # Full multi-platform: linux/amd64,linux/arm64
        cache-from: type=gha,scope=ci-shared
        cache-to: type=gha,mode=min,scope=ci-shared,max-size=500m

  cleanup-pr-caches:
    name: Cleanup PR Caches
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
    - name: Clean PR caches
      run: |
        echo "Cleaning caches for merged PR #${{ github.event.number }} from branch ${{ github.head_ref }}"
        
        # Clean caches that contain the PR branch name or PR number
        gh api repos/${{ github.repository }}/actions/caches --paginate | \
        jq -r --arg branch "${{ github.head_ref }}" --arg pr "${{ github.event.number }}" \
        '.actions_caches[] | select(.key | contains($branch) or contains("pr-" + $pr) or contains("refs-pull-" + $pr)) | .id' | \
        while read cache_id; do
          echo "Deleting cache ID: $cache_id"
          gh api repos/${{ github.repository }}/actions/caches/$cache_id -X DELETE || echo "Failed to delete cache $cache_id"
        done
        
        echo "PR cache cleanup completed"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
